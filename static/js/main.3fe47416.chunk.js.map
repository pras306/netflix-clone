{"version":3,"sources":["api/requests.js","components/Modal/Modal.js","components/Banner/Banner.js","components/Row/Row.js","containers/App.js","index.js"],"names":["TMDB_BASE_URL","YOUTUBE_BASE_URL","TMDB_REQUESTS","title","fetchURL","Modal","open","onClose","children","ReactDOM","createPortal","className","onClick","document","querySelector","Banner","useState","movie","setMovies","poster","setPoster","trailer","setTrailer","isOpen","setIsOpen","useEffect","a","axios","get","response","selMovie","data","Math","floor","random","length","backdrop_path","fetchData","handleClick","term","name","original_name","alert","style","backgroundSize","backgroundImage","backgroundPosition","video","src","id","videoId","frameBorder","str","strLimiter","undefined","whiteSpaceIndex","substring","indexOf","handleMovieOverview","overview","Row","isLargeRow","movies","ref","useRef","scroll","offset","current","scrollLeft","renderMovieTiles","map","poster_path","alt","App","request","includes","height","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3fe47416.chunk.js","sourcesContent":["export const TMDB_BASE_URL =  process.env.NODE_ENV === \"production\" ? \"https://api-proxy-server.up.railway.app/api/v1/movies\" : \"http://localhost:5000/api/v1/movies\";\r\n\r\nexport const YOUTUBE_BASE_URL = process.env.NODE_ENV === \"production\" ? \"https://api-proxy-server.up.railway.app/api/v1/videos/search\" : \"http://localhost:5000/api/v1/videos/search\";\r\n\r\nexport const TMDB_REQUESTS = [\r\n    { title: \"Netflix Originals\", fetchURL: \"/fetchNetflixOriginals\" },\r\n    { title: \"Trending\", fetchURL: \"/fetchTrending\" },\r\n    { title: \"Top Rated\", fetchURL: \"/fetchTopRated\" },\r\n    { title: \"Action Movies\", fetchURL: \"/fetchActionMovies\" },\r\n    { title: \"Comedy Movies\", fetchURL: \"/fetchComedyMovies\" },\r\n    { title: \"Horror Movies\", fetchURL: \"/fetchHorrorMovies\" },\r\n    { title: \"Romance Movies\", fetchURL: \"/fetchRomanceMovies\" },\r\n    { title: \"Documentaries\", fetchURL: \"/fetchDocumentaries\" },    \r\n]\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './Modal.css';\r\n\r\nconst Modal = ({ open, onClose, children }) => {\r\n\r\n    if(!open) return null;\r\n\r\n    return ReactDOM.createPortal(\r\n        <div className=\"modal\">\r\n            <div className=\"modal__icon\" onClick={onClose}>X</div>\r\n            <div className=\"modal__content\">\r\n                {children}\r\n            </div>\r\n        </div>,\r\n         document.querySelector(\"#modal\")\r\n    )\r\n};\r\n\r\nexport default Modal;\r\n","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport './Banner.css';\r\nimport Modal from '../Modal/Modal';\r\nimport { YOUTUBE_BASE_URL } from '../../api/requests';\r\n\r\nconst Banner = ({ fetchURL }) => {\r\n    const [movie, setMovies] = useState([]);\r\n    const [poster, setPoster] = useState('');\r\n    const [trailer, setTrailer] = useState(null);\r\n    const [isOpen, setIsOpen] = useState(false);\r\n\r\n    useEffect(() => {\r\n        async function fetchData(){\r\n            const response = await axios.get(fetchURL);\r\n            let selMovie = response.data[Math.floor(Math.random() * (response.data.length - 1))];\r\n            setMovies(selMovie);\r\n            setPoster(`url(https://image.tmdb.org/t/p/original/${selMovie?.backdrop_path})`);\r\n        }\r\n        fetchData();\r\n    },[fetchURL]);\r\n\r\n    const handleClick = async (movie) => {\r\n        let term = `${movie?.name || movie?.original_name || movie?.title} trailer`;\r\n        try {\r\n            let response = await axios.get(YOUTUBE_BASE_URL + `/${term}`);\r\n            if(response.data.length <= 0) {\r\n                alert(\"Unable to fetch trailer of the movie you requested.\");\r\n                return;\r\n            }\r\n            setTrailer(response.data[0]);\r\n            setIsOpen(true);\r\n        } catch(err) {\r\n            alert(\"Unable to fetch trailer of the movie you requested.\");\r\n        }\r\n    }\r\n\r\n    const handleMovieOverview = (str, strLimiter) => {\r\n        if (str === undefined || str?.length <= 0) return null;\r\n\r\n        if (str?.length < strLimiter) {\r\n            return str;\r\n        }\r\n\r\n        let whiteSpaceIndex = strLimiter + str?.substring(strLimiter,)?.indexOf(' ');\r\n        return str?.substring(0, whiteSpaceIndex) + '....';\r\n    }\r\n\r\n\r\n    return (\r\n        <header className='banner' style={{ backgroundSize:'contain', backgroundImage:`${poster}`, backgroundPosition: 'center center'}}>\r\n            <div className='banner__contents'>\r\n                <h1>{ movie?.name || movie?.original_name || movie?.title }</h1>\r\n                <div className='banner__buttons'>\r\n                    <button className='banner__button' onClick={() => handleClick(movie)}>Play Trailer</button>\r\n                    { trailer &&\r\n                        <Modal open={isOpen} video={trailer} onClose={() => setIsOpen(false)}>\r\n                            <iframe title=\"player\" src={`https://www.youtube.com/embed/${trailer.id.videoId}?autoplay=1`} frameBorder=\"0\"></iframe>\r\n                        </Modal>\r\n                    }\r\n                </div>\r\n                <div className='banner__description'>{handleMovieOverview(movie.overview, 200)}</div>\r\n            </div>            \r\n        </header>\r\n    );\r\n};\r\n\r\nexport default Banner;\r\n","import React, { useState, useRef, useEffect } from 'react';\r\nimport axios from 'axios';\r\n// import { LazyLoadImage, trackWindowScroll } from 'react-lazy-load-image-component';\r\n// import 'react-lazy-load-image-component/src/effects/blur.css';\r\n\r\nimport './Row.css';\r\nimport { YOUTUBE_BASE_URL } from '../../api/requests';\r\nimport Modal from '../Modal/Modal';\r\n\r\nconst base_url = 'https://image.tmdb.org/t/p/original/';\r\n\r\nconst Row = ({ title, fetchURL, isLargeRow }) => {\r\n    const [ movies, setMovies ] = useState([]);\r\n    const [ trailer, setTrailer ] = useState(null);\r\n    const [ isOpen, setIsOpen ] = useState(false);\r\n    const ref = useRef(null);\r\n\r\n    useEffect(() => {\r\n        async function fetchData(){\r\n            const response = await axios.get(fetchURL);\r\n            setMovies(response.data);\r\n        }\r\n\r\n        fetchData();\r\n\r\n    }, [fetchURL]);\r\n\r\n    const scroll = (offset) => {\r\n        ref.current.scrollLeft += offset;\r\n    }\r\n\r\n    const handleClick = async (movie) => {\r\n        setTrailer('');\r\n        let term = `${movie?.name || movie?.original_name || movie?.title} trailer`;\r\n        try {\r\n            let response = await axios.get(YOUTUBE_BASE_URL + `/${term}`);\r\n            if(response.data.length <= 0) {\r\n                alert(\"Unable to fetch trailer of the movie you requested.\");\r\n                return;\r\n            }\r\n            setTrailer(response.data[0]);\r\n            setIsOpen(true);\r\n        } catch(err) {\r\n            alert(\"Unable to fetch trailer of the movie you requested.\");\r\n        }\r\n    }\r\n\r\n    const renderMovieTiles = movies ? movies.map((movie) => {\r\n        return <img key={movie.id} className={`row__poster ${isLargeRow && \"row__posterLarge\"}`} \r\n                    src={`${base_url}${ isLargeRow ? movie?.poster_path : movie?.backdrop_path ? movie.backdrop_path : movie.poster_path}`} \r\n                    alt={movie?.name || movie?.original_name || movie?.title} onClick={() => handleClick(movie)}/> \r\n    }) : null;\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <h2>{title}</h2>\r\n            <div className='row__posters' ref={ref}>\r\n                <div className='row__arrow'>\r\n                    <i className='row__leftarrow' onClick={() => scroll(-1000)}></i>\r\n                </div>\r\n                {renderMovieTiles}\r\n                <div className='row__arrow'>\r\n                    <i className='row__rightarrow' onClick={() => scroll(1000)}></i>\r\n                </div>\r\n            </div>\r\n            {trailer &&\r\n                <Modal open={isOpen} onClose={() => setIsOpen(false)}>\r\n                    <iframe title=\"player\" src={`https://www.youtube.com/embed/${trailer.id.videoId}?autoplay=1`} frameBorder=\"0\"></iframe>\r\n                </Modal>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Row;\r\n","import React from 'react';\nimport LazyLoad from 'react-lazyload';\n\nimport './App.css';\nimport { TMDB_BASE_URL, TMDB_REQUESTS} from '../api/requests';\nimport Banner from '../components/Banner/Banner';\nimport Row from '../components/Row/Row';\n\nconst App = () => {\n\n  const renderRows = () => {\n    return TMDB_REQUESTS.map((request, id) => {\n      if(request.title.includes(\"Netflix Originals\")) {\n        return (\n          <LazyLoad height={500} key={id}>\n            <Row title={request.title} fetchURL={TMDB_BASE_URL + request.fetchURL} isLargeRow />\n          </LazyLoad>\n        );\n      } else {\n        return (\n          <LazyLoad height={500} offset={[-100, 0]} key={id}>\n            <Row title={request.title} fetchURL={TMDB_BASE_URL + request.fetchURL} />\n          </LazyLoad>\n        );\n      }\n    });\n  };\n\n  return (\n    <div className=\"app\">\n      <Banner fetchURL={TMDB_BASE_URL + \"/fetchNetflixOriginals\"} />\n      {renderRows()}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}